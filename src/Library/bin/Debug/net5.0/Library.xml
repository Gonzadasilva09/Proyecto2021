<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Telegram.Admin">
            <summary>
            Clase encargada de manejar admins, hereda de la clase abstracta User.
            Esta clase cumple con Expert, conoce todos los datos necesarios para cumplir con su responsabilidad
            </summary>
        </member>
        <member name="M:Telegram.Admin.#ctor(System.String,System.String,Telegram.Rubro,System.String)">
            <summary>
            Constructor de objetos de tipo Admin.
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="rubro"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Admin.CreateToken(System.String)">
            <summary>
            Metodo de admin para crear un token.
            </summary>
            <param name="token"></param>
        </member>
        <member name="T:Telegram.APILocation">
            <summary>
            Clase encargada de interactuar con la ApiLocation
            </summary>
        </member>
        <member name="P:Telegram.APILocation.Instance">
            <summary>
            Singleton para que solo exista una instancia del catalogo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telegram.APILocation.Route(Telegram.Offer,Telegram.Emprendedores)">
            <summary>
            El metodo Route se ocupa de calcular una ruta entre dos direcciones, una tomada de un atributo de la oferta y otra de un atributo del emprendedor y crear un mapa en formato png, en base a esos datos y mostrarlo en la app que se este utilizando.
            </summary>
            <param name="offer"></param>
            <param name="emprendedor"></param>
        </member>
        <member name="M:Telegram.APILocation.LocationEmprendedor(Telegram.Emprendedores)">
            <summary>
            Envia mapa en formato Png a la plataforma donde se este utilizando el bot, donde se puede ver la direccion ingresada por el emprendedor cuando creo su perfil.
            </summary>
            <param name="emprendedor"></param>
        </member>
        <member name="M:Telegram.APILocation.LocationOffer(Telegram.Offer)">
            <summary>
            Crea un mapa y lo envia a la app que se este utilizando donde se puede ver la direccion de la oferta obtenida en su creación.
            </summary>
            <param name="offer"></param>
        </member>
        <member name="T:Telegram.Business">
            <summary>
            Clase encargada de manejar a las empresas, hereda de la clase abstracta User.
            Esta clase cumple con Expert, conoce todos los datos requeridos para cumplir sus responsabilidades.
            El patrón SRP no se cumple en esta clase, ya que tiene la responsabilidad de conocerse a si misma y de crear ofertas, por falta de tiempo no ha sido posible solucionarlo.
            El patrón Creator no se cumple correctamente en esta clase, ninguno de los requisitos se cumple para que Business cree ofertas.
            </summary>
        </member>
        <member name="M:Telegram.Business.#ctor(System.String,System.String,Telegram.Rubro,System.String)">
            <summary>
            Constructor de objetos de tipo Business.
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="rubro"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Business.MakeOffer(System.String,System.String,System.String,Telegram.Units,System.Int32,System.String,Telegram.Category)">
            <summary>
            Metodo para que una empresa haga una oferta.
            </summary>
            <param name="location"></param>
            <param name="type"></param>
            <param name="prodname"></param>
            <param name="prodquantity"></param>
            <param name="produnit"></param>
            <param name="prodprice"></param>
            <param name="categories"></param>
        </member>
        <member name="F:Telegram.Business.offersMade">
            <summary>
            Lista que contiene todas las ofertas hechas por la empresa.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telegram.BuyOffer">
            <summary>
            Clase especializada en comprar ofertas, esta clase es un singleton, solamente es necesaria una instancia de dicha clase para procesar las compras realizadas por los usuarios.
            Esta clase cumple con SRP, su unica responsabilidad es proesar compras realizadas por los usuarios.
            </summary>
        </member>
        <member name="P:Telegram.BuyOffer.Instance">
            <summary>
            Singleton para que solo exista una instancia ocupada de comprar las ofertas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telegram.BuyOffer.Buy(Telegram.Offer,Telegram.Emprendedores)">
            <summary>
            Metodo encargado de efectuar la compra de una oferta, en este metodo se remueve la oferta del catalogo y pasa a estar en la lista de comprados del emprendedor que la compre. A su vez la oferta pasa a no estar disponible y a tener como atributo propietario a quien la compro.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telegram.Catalogo">
            <summary>
            Clase encargada de manejar el catalogo.
            Esta clase es un singleton, es la encargada de contener todas las ofertas hechas por usuarios, y por lo tanto se necesita una instancia unica.
            Esta clase cumple con Expert, su unica responsabilidad es la de contener objetos de tipo offer.
            </summary>
        </member>
        <member name="P:Telegram.Catalogo.Instance">
            <summary>
            Singleton para que solo exista una instancia del catalogo.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Telegram.Catalogo.AllOffers">
            <summary>
             Lista encargada de guardar las ofertas e interactuar con los usuarios.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telegram.Catalogo.Guardaroffer">
            <summary>
            Metodo encargado de guardar los datos de las ofertas en un Json homonimo.
            </summary>
        </member>
        <member name="M:Telegram.Catalogo.cargaroffer">
            <summary>
            Metodo encargado de incorporar las ofertas existentes al finalizar la sesión anterior.
            </summary>
        </member>
        <member name="T:Telegram.Category">
            <summary>
            Clase que se encarga de manejar las categorias, esta clase cumple con expert ya que contiene toda la información necesaria para cumplir con su función
            En un principio era parte del plan hacer una clase abstracta "Elemento" y que Rubros, Ratings y Categories heredaran de la misma para cumplir con LSP, pero debido a problemas con la persistencia esto no fue posible.
            </summary>
        </member>
        <member name="M:Telegram.Category.#ctor(System.String,System.String)">
            <summary>
            Constructor de objetos tipo Category.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="P:Telegram.Category.Name">
            <summary>
            Obtiene o establece el nombre de una categoria.
            </summary>
            <value></value>
        </member>
        <member name="P:Telegram.Category.Description">
            <summary>
            Obtiene o establece la descripcion de una categoria.
            </summary>
            <value></value>
        </member>
        <member name="T:Telegram.Emprendedores">
            <summary>
            Clase encargada de manejar los emprendedores, hereda de User.
            Esta clase cumple con OCP, es facil de extender mediante la clase abstracta User.
            Esta clase cumple con Expert, tiene todos los datos que requiere para cumplir sus funcionalidades.
            Esta clase cumple con SRP, su unica responsabilidad es conocerse a si mismo.
            </summary>
        </member>
        <member name="F:Telegram.Emprendedores.Listratings">
            <summary>
            Lista de habilitaciones que tiene el emprendedor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Telegram.Emprendedores.Purchased">
            <summary>
            Lista de compras realizadas por el emprendedor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telegram.Emprendedores.#ctor(System.String,System.String,Telegram.Rubro,System.String)">
            <summary>
            Constructor de objetos de tipo Emprendedor.
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="rubro"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Emprendedores.AddRatings(Telegram.Ratings)">
            <summary>
            Metodo para añadir habilitaciones a un emprendedor.
            </summary>
            <param name="rating"></param>
        </member>
        <member name="T:Telegram.AddRatingHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:Telegram.AddRatingHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.AddRatingHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.AddRatingHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.AllOfferHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:Telegram.AllOfferHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.StartHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.AllOfferHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.BaseHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implmementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:Telegram.BaseHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:Telegram.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:Telegram.BaseHandler.#ctor(Telegram.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.BaseHandler.#ctor(System.String[],Telegram.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.BaseHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="responder">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:Telegram.BaseHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:Telegram.BaseHandler.CanHandle(Telegram.IMessege)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:Telegram.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:Telegram.BaseHandler.Handle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Telegram.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:Telegram.CancelHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/cancelar", se utiliza para cancelar la operación actual.
            </summary>
        </member>
        <member name="M:Telegram.CancelHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.CancelHandler"/>. Esta clase procesa el mensaje "/cancelar".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.CancelHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "/cancelar" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.CreateCategoryHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que utiliza el comando "/createcategoria", este handler permite al admin crear nuevas categorias.
            </summary>
        </member>
        <member name="M:Telegram.CreateCategoryHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.StartHandler"/>. Esta clase procesa el mensaje "/Crearcaategoria"
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.CreateCategoryHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "/crearcategoria" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.CreateRatingHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que utiliza el comando "/crearhabilitacion", este handler permite al admin crear nuevos ratings.
            </summary>
        </member>
        <member name="M:Telegram.CreateRatingHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.StartHandler"/>. Esta clase procesa el mensaje "/crearhabilitacion"
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.CreateRatingHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "/crearhabilitacion" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.CreateRubroHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que utiliza el comando "/createrubro", este handler permite al admin crear nuevos rubros.
            </summary>
        </member>
        <member name="M:Telegram.CreateRubroHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.StartHandler"/>. Esta clase procesa el mensaje "/Crearcaategoria"
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.CreateRubroHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "/crearrubro" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.CreateTokenHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que utiliza el comando "/creartoken", este handler permite al admin crear nuevos tokens.
            </summary>
        </member>
        <member name="M:Telegram.CreateTokenHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.StartHandler"/>. Esta clase procesa el mensaje "/crearetoken"
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.CreateTokenHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "/createtoken" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Telegram.IHandler" -->
        <member name="P:Telegram.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:Telegram.IHandler.Handle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Telegram.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:Telegram.OfferHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/crearoferta", es el encargado de crear nuevas ofertas.
            </summary>
        </member>
        <member name="M:Telegram.OfferHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.OfferHandler"/>. Esta clase procesa el mensaje "/crearoferta".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.OfferHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "/crearoferta" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.OfferXCategoryHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:Telegram.OfferXCategoryHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.StartHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.OfferXCategoryHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.PhotoUbicationHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:Telegram.PhotoUbicationHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.StartHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.PhotoUbicationHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.PhotoRouteHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:Telegram.PhotoRouteHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.StartHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.PhotoRouteHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.RegisterHandlerEmprendedores">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/emprendedor", es el handler encargado de crear nuevos emprendedores.
            Se aplica SRP, la unica responsabilidad de este handler es crear nuevos emprendedores.
            
            </summary>
        </member>
        <member name="M:Telegram.RegisterHandlerEmprendedores.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.RegisterHandlerEmprendedores"/>. Esta clase procesa el mensaje "/emprendedor".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.RegisterHandlerEmprendedores.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "/emprendedor" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.RegisterHandlerEmpresa">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/empresa", es el encargado de crear nuevas empresas.
            Se aplica SRP, la unica responsabilidad de este handler es crear nuevas empresas.
            </summary>
        </member>
        <member name="M:Telegram.RegisterHandlerEmpresa.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.RegisterHandlerEmpresa"/>. Esta clase procesa el mensaje "/empresa".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.RegisterHandlerEmpresa.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "/empresa" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.SearchHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/buscaroferta".
            </summary>
        </member>
        <member name="M:Telegram.SearchHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.SearchHandler"/>. Esta clase procesa el mensaje "/buscaroferta".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.SearchHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "/buscaroferta" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.SeeOfferHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:Telegram.SeeOfferHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.StartHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.SeeOfferHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.SignUpHandler">
            <summary>
            Debido a las diferencias entre registrarse como una empresa o como un emprendedor, decidimos aplicar polimorfismo, este handler se encarga de mandar al usuario al handler apropiado, ya sea RegisterEmpresaHandler o RegisterEmprendedorHandler.
            </summary>
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando /registrarse.
            </summary>
        </member>
        <member name="M:Telegram.SignUpHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.SignUpHandler"/>. Esta clase procesa el mensaje "/registrarse"
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.SignUpHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "/registrarse" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.StartAdminHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que utiliza el comando "/start", este handler se dedica a mostrar el menu a usuarios de tipo admin.
            Esta clase aplica polimorfismo, responde al comando "/start" solamente si el usuario es de tipo admin.
            </summary>
        </member>
        <member name="M:Telegram.StartAdminHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.StartHandler"/>. Esta clase procesa el mensaje "/start"
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.StartAdminHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "/start" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.StartEmpresaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que utiliza el comando "/start", este handler se dedica a mostrar el menu a usuarios de tipo empresa.
            Esta clase aplica polimorfismo, responde al comando "/start" solamente si el usuario es de tipo empresa.
            
            </summary>
        </member>
        <member name="M:Telegram.StartEmpresaHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.StartHandler"/>. Esta clase procesa el mensaje "/start"
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.StartEmpresaHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "/start" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.StartEmprendedorHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que utiliza el comando /start, este handler es una variacion del StartHandler dedicada a Emprendedor.
            Esta clase aplica polimorfismo, responde al comando "/start" solamente si el usuario es de tipo emprendedor.
            </summary>
        </member>
        <member name="M:Telegram.StartEmprendedorHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.StartHandler"/>. Esta clase procesa el mensaje /start.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.StartEmprendedorHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje "/start" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.StartHandler">
            <summary>
            Debido a que, dependiendo si el usuario no está registrado, está registrado como empresa o como emprendedor, decidimos aplicar el patrón de polimorfismo para no tener que cambiar el comopotamiento del handler dependiendo del estado del usuario.
            </summary>
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando /start, se utiliza como menú para usuarios no registrados.
            </summary>
        </member>
        <member name="M:Telegram.StartHandler.#ctor(Telegram.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Telegram.StartHandler"/>. Esta clase procesa el mensaje /start
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Telegram.StartHandler.InternalHandle(Telegram.IMessege,System.String@)">
            <summary>
            Procesa el mensaje, responde acorde dependiendo de la posicion del user devolviendo true, o retorna false en caso de no poder procesar el mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Telegram.IJsonConvertibl">
            <summary>
            Define el tipo que tienen los objetos que pueden ser serializados en y deserializados desde texto en formato
            Json.
            </summary>
        </member>
        <member name="M:Telegram.IJsonConvertibl.ConvertToJson">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="T:Telegram.Listas">
            <summary>
            Clase encargada de guardar todas las listas independientes de otras clases con las cuales no interactuan directamente con los usuarios.
            Esta clase es un singleton, necesitamos una clase contenedora de las instancias de otros objetos, y solamente es necesaria una unica instancia.
            Esta clase tambien utiliza creator, para crear multiples objetos como empresas o emprendedores, esto se debe a que Listas contiene instancias de las mismas.
            
            </summary>
        </member>
        <member name="P:Telegram.Listas.Instance">
            <summary>
            Singleton para que solo exista una instancia de las listas.
            </summary>
        </member>
        <member name="F:Telegram.Listas.TokenVerified">
            <summary>
            Diccionario que almacena si el token ingresado por el usuario ha sido verificado o no.
            </summary>
            <typeparam name="string"></typeparam>
            <typeparam name="bool"></typeparam>
            <returns></returns>
        </member>
        <member name="F:Telegram.Listas.Listcategory">
            <summary>
            Lista que contiene todas las categorias disponibles.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Telegram.Listas.Listadmin">
            <summary>
            Lista que contiene todoas los admins creados.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Telegram.Listas.Listemprendedores">
            <summary>
            Lista que contiene todos los emprendedores creados.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Telegram.Listas.Listratings">
            <summary>
            Lista que contiene todas las habilitaciones disponibles.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Telegram.Listas.Listrubro">
            <summary>
            Lista que contiene todos los rubros disponibles.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Telegram.Listas.Listunit">
            <summary>
            Lista que contiene todas las unidades disponibles para usar.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Telegram.Listas.Listbussiness">
            <summary>
            Lista que contiene todas las empresas creadas.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Telegram.Listas.Listtokens">
            <summary>
            Lista que contiene todos los tokens de verificación.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Telegram.Listas.PossibleRatings">
            <summary>
            Lista que contiene todas las posiciones de las habilitaciones en formato /(posición) para uso en handlers.
            </summary>
            <typeparam name="string"></typeparam>
            <returns></returns>
        </member>
        <member name="F:Telegram.Listas.HistorialUser">
            <summary>
            Diccionario encargado de guardar las interacciones de los usuarios con el bot.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Telegram.Listas.Utilities">
            <summary>
            Diccionario utilizado para almacenar los indices de los ratings vinculados a cierto usuario.
            </summary>
            <param name="ID"></param>
        </member>
        <member name="F:Telegram.Listas.Resultados">
            <summary>
            Diccionario utilizado para almacenar los indices de los ratings vinculados a cierto usuario.
            </summary>
            <param name="ID"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Telegram.Listas.AdminKey" -->
        <member name="M:Telegram.Listas.Accion(System.String)">
            <summary>
            Metodo para agregar el id de los usuarios al diccionario HistorialUser.
            </summary>
            <param name="ID"></param>
        </member>
        <member name="F:Telegram.Listas.EmprendedoresKey">
            <summary>
            Diccionario utilizado para almacenar instancias de emprendedor asociadas a cierta ID.
            </summary>
            <typeparam name="string"></typeparam>
            <typeparam name="Emprendedores"></typeparam>
            <returns></returns>
        </member>
        <member name="F:Telegram.Listas.BusinessKey">
            <summary>
            Diccionario utilizado para almacenar instancias de empresa asociadas a cierta ID.
            </summary>
            <typeparam name="string"></typeparam>
            <typeparam name="Business"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telegram.Listas.CrearUtilities(System.String)">
            <summary>
            Metodo para agregar el id de los usuarios al diccionario Utilities.
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Telegram.Listas.CrearResultados(System.String,System.Collections.Generic.List{Telegram.Offer})">
            <summary>
            Metodo para agregar Los resultados de busqueda.
            </summary>
            <param name="ID"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telegram.Listas.CreateRating(System.String,System.String)" -->
        <member name="M:Telegram.Listas.CreateRubro(System.String,System.String)">
            <summary>
            Metodo de admin para crear nuevos rubros.
            </summary>
            <param name="descripcion"></param>
            <param name="name"></param>
        </member>
        <member name="M:Telegram.Listas.CreateCategory(System.String,System.String)">
            <summary>
            Metodo de admin para crear nuevas categorias.
            </summary>
            <param name="name"></param>
            <param name="descripcion"></param>
        </member>
        <member name="M:Telegram.Listas.Guardarlistas">
            <summary>
            Metodo encargado de guardar toda la informacion almacenada en Listas. En los json correspondientes a cada sub-lista.
            </summary>
        </member>
        <member name="M:Telegram.Listas.Cargarlistas">
            <summary>
            Metodo encargado de incorporar toda la informacion existente al finalizar la sesión anterior. En los json correspondientes a cada sub-lista.
            </summary>
        </member>
        <member name="T:Telegram.Distance">
            <summary>
            Representa la distancia entre las coordenas o las direcciones de origen y destino retornada en los métodos
            <see cref="M:Telegram.LocationApiClient.GetDistanceAsync(Telegram.Location,Telegram.Location)"/> o
            <see cref="M:Telegram.LocationApiClient.GetDistanceAsync(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:Telegram.Distance.Found">
            <summary>
            Obtiene o establece un valor que indica si se encontraron o no las coordenas o las direcciones de origen y
            destino.
            </summary>
            <value>true si se encontró la dirección; false en caso contrario.</value>
        </member>
        <member name="P:Telegram.Distance.TravelDistance">
            <summary>
            Obtiene o establece la distancia entre las coordenadas o las direcciones de origen y destino.
            </summary>
            <value>La distancia en metros.</value>
        </member>
        <member name="P:Telegram.Distance.TravelDuration">
            <summary>
            Obtiene o establece el tiempo que se demora en llegar de las coordenadas o de las direcciones de origen a las de destino.
            </summary>
            <value>El tiempo que se demora en minutos.</value>
        </member>
        <member name="T:Telegram.Location">
            <summary>
            Representa las coordenadas y otros datos de la ubicación de una dirección retornada en el método
            <see cref="M:Telegram.LocationApiClient.GetLocationAsync(System.String,System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:Telegram.Location.Found">
            <summary>
            Obtiene o establece un valor que indica si se encontró o no la dirección. En ese caso son válidos los demás
            valores. En caso contrario los demás valores son indeterminados.
            </summary>
            <value>true si se encontró la dirección; false en caso contrario.</value>
        </member>
        <member name="P:Telegram.Location.AddresLine">
            <summary>
            Obtiene o establece la dirección: calle y número, ruta y kilómetro, etc.
            </summary>
            <value>Por ejemplo, Avenida 8 de Octubre 2738.</value>
        </member>
        <member name="P:Telegram.Location.CountryRegion">
            <summary>
            Obtiene o establece el país.
            </summary>
            <value>Por ejemplo, Uruguay.</value>
        </member>
        <member name="P:Telegram.Location.FormattedAddress">
            <summary>
            Obtiene o establece la dirección completa, incluyendo ciudad, código postal, etc.
            </summary>
            <value>Por ejemplo, Avenida 8 de Octubre 2738, Montevideo, 11200, Uruguay.</value>
        </member>
        <member name="P:Telegram.Location.Locality">
            <summary>
            Obtiene o establece la localidad o ciudad.
            </summary>
            <value>Por ejemplo, Montevideo.</value>
        </member>
        <member name="P:Telegram.Location.PostalCode">
            <summary>
            Obtiene o establece el código postal.
            </summary>
            <value>Por ejemplo, 11200.</value>
        </member>
        <member name="P:Telegram.Location.Latitude">
            <summary>
            Obtiene o establece la latitud de la dirección.
            </summary>
            <value>El valor de la latitud en formato decimal.</value>
        </member>
        <member name="P:Telegram.Location.Longitude">
            <summary>
            Obtiene o establece la longitud de la dirección.
            </summary>
            <value>El valor de la longitud en formato decimal.</value>
        </member>
        <member name="T:Telegram.LocationApiClient">
            <summary>
            Un cliente de la API de localización.
            </summary>
        </member>
        <member name="M:Telegram.LocationApiClient.GetLocationAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Obtiene las coordenadas de una dirección.
            </summary>
            <param name="address">La dirección.</param>
            <param name="city">La ciudad. Es opcional. El valor predeterminado es Montevideo.</param>
            <param name="department">El departamento, estado, provincia, etc. Es opcional. El valor predeterminado es `ontevideo.</param>
            <param name="country">El país. Es opcional. El valor predeterminado es Uruguay.</param>
            <returns>Las coordenadas de la dirección.</returns>
        </member>
        <member name="M:Telegram.LocationApiClient.GetLocation(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:Telegram.LocationApiClient.GetLocationAsync(System.String,System.String,System.String,System.String)" />
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:Telegram.LocationApiClient.GetDistanceAsync(Telegram.Location,Telegram.Location)">
            <summary>
            Obtiene la distancia entre dos coordenadas.
            </summary>
            <param name="from">La coordenada de origen.</param>
            <param name="to">La coordenada de destino.</param>
            <returns>La distancia entre las dos coordenadas.</returns>
        </member>
        <member name="M:Telegram.LocationApiClient.GetDistance(Telegram.Location,Telegram.Location)">
            <inheritdoc cref="M:Telegram.LocationApiClient.GetDistanceAsync(Telegram.Location,Telegram.Location)" />
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:Telegram.LocationApiClient.GetDistanceAsync(System.String,System.String)">
            <summary>
            Obtiene la distancia entre dos direcciones.
            </summary>
            <param name="from">La dirección de origen.</param>
            <param name="to">La dirección de destino.</param>
            <returns>La distancia entre las dos direcciones.</returns>
        </member>
        <member name="M:Telegram.LocationApiClient.GetDistance(System.String,System.String)">
            <inheritdoc cref="M:Telegram.LocationApiClient.GetDistanceAsync(System.String,System.String)" />.
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:Telegram.LocationApiClient.DownloadMapAsync(System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Descarga una mapa de una coordenada.
            </summary>
            <param name="latitude">La latitud de la coordenada.</param>
            <param name="longitude">La longitud de la coordenada.</param>
            <param name="path">La ruta del archivo donde guardar el mapa. El formato es PNG.</param>
            <param name="zoomLevel">El nivel de zoom del mapa entre 1 y 20. Es opcional. El valor predeterminado es
            15.</param>
            <returns>
            Una tarea que representa la operación asincrónica.
            </returns>
        </member>
        <member name="M:Telegram.LocationApiClient.DownloadMap(System.Double,System.Double,System.String,System.Int32)">
            <inheritdoc cref="M:Telegram.LocationApiClient.DownloadMapAsync(System.Double,System.Double,System.String,System.Int32)" />.
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:Telegram.LocationApiClient.DownloadRouteAsync(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Un mapa con una ruta entre dos coordenadas.
            </summary>
            <param name="fromLatitude">La latitud de la coordenada de origen.</param>
            <param name="fromLongitude">La longitu de la coordenada de origen.</param>
            <param name="toLatitude">La latitud de la coordenada de destino.</param>
            <param name="toLongitude">La longitud de la coordenada de destino.</param>
            <param name="path">La ruta del archivo donde guardar el mapa. Es formato es PNG.</param>
            <returns>
            Una tarea que representa la operación asincrónica.
            </returns>
        </member>
        <member name="M:Telegram.LocationApiClient.DownloadRoute(System.Double,System.Double,System.Double,System.Double,System.String)">
            <inheritdoc cref="M:Telegram.LocationApiClient.DownloadRouteAsync(System.Double,System.Double,System.Double,System.Double,System.String)" />
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:Telegram.LocationApiClient.Dispose">
            <inheritdoc cref="T:System.IDisposable" />
        </member>
        <member name="M:Telegram.LocationApiClient.Dispose(System.Boolean)">
            <inheritdoc cref="T:System.IDisposable" />
        </member>
        <member name="T:Telegram.Materials">
            <summary>
            Clase encargada de manejar los materiales.
            </summary>
        </member>
        <member name="M:Telegram.Materials.#ctor(System.String,System.Int32,Telegram.Units,System.String,Telegram.Category)">
            <summary>
            Constructor de objetos de tipo material.
            </summary>
            <param name="name"></param>
            <param name="quantity"></param>
            <param name="units"></param>
            <param name="price"></param>
            <param name="categories"></param>
        </member>
        <member name="P:Telegram.Materials.Categories">
            <summary>
            Categorias del material.
            </summary>
            <value></value>
        </member>
        <member name="P:Telegram.Materials.Name">
            <summary>
            Obtiene o establece el nombre del material.
            </summary>
            <value></value>
            
        </member>
        <member name="P:Telegram.Materials.Quantity">
            <summary>
            Obtiene o establece la cantidad del material.
            </summary>
            <value></value>
        </member>
        <member name="P:Telegram.Materials.Unit">
            <summary>
            Obtiene o establece en que unidad de representa el material.
            </summary>
            <value></value>
        </member>
        <member name="P:Telegram.Materials.Price">
            <summary>
            Obtiene o establece el precio del material.
            </summary>
            <value></value>
        </member>
        <member name="T:Telegram.Offer">
            <summary>
            Clase que se encarga de controlar las ofertas, en esta clase utilizamos creator ya que offer utiliza de manera muy cercana a materials.
            Cumple con SRP ya que tiene la unica responsabilidad de crear ofertas.
            </summary>
        </member>
        <member name="F:Telegram.Offer.Ratings">
            <summary>
            Lista que contiene las habilitaciones de la oferta.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telegram.Offer.Recurrent">
            <summary>
            Atributo que determina si la oferta es recurrente o no, obtiene y establece el valor.
            </summary>
            <value></value>
        </member>
        <member name="P:Telegram.Offer.Location">
            <summary>
            Establece o obtiene el lugar donde se encuentra la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Telegram.Offer.Type">
            <summary>
            Establece o obtiene el tipo de la oferta, que puede ser residuo o material.
            </summary>
            <value></value>
        </member>
        <member name="P:Telegram.Offer.Product">
            <summary>
            Obtiene y establece el material ofrecido en la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Telegram.Offer.Status">
            <summary>
            Obtiene o establece el atributo que determina si la oferta esta disponible o no.
            </summary>
            <value></value>
        </member>
        <member name="P:Telegram.Offer.Owner">
            <summary>
            Obtiene o establece el dueño de la ofterta.
            </summary>
            <value></value>
        </member>
        <member name="M:Telegram.Offer.#ctor(System.String,System.String,System.String,Telegram.Units,System.Int32,System.String,Telegram.Category)">
            <summary>
            Constructor de objetos de tipo oferta.
            </summary>
            <param name="location"></param>
            <param name="categories"></param>
            <param name="type"></param>
            <param name="productname"></param>
            <param name="productquantity"></param>
            <param name="productunit"></param>
            <param name="productprice"></param>
        </member>
        <member name="T:Telegram.Ratings">
            <summary>
            Clase encargada de controlar las habilitaciones, esta clase cumple con expert ya que contiene toda la información necesaria para cumplir con su función"
            En un principio era parte del plan hacer una clase abstracta "Elemento" y que Rubros, Ratings y Categories heredaran de la misma para cumplir con LSP, pero debido a problemas con la persistencia esto no fue posible.
            </summary>
        </member>
        <member name="P:Telegram.Ratings.Description">
            <summary>
            Obtiene o establece una descripcion de la habilitación.
            </summary>
            <value></value>
        </member>
        <member name="P:Telegram.Ratings.Name">
            <summary>
            Obtiene o establece el nombre de una habilitacion.
            </summary>
            <value></value>
        </member>
        <member name="M:Telegram.Ratings.#ctor(System.String,System.String)">
            <summary>
            Constructor de habilitaciones.
            </summary>
            <param name="description"></param>
            <param name="name"></param>
        </member>
        <member name="T:Telegram.Rubro">
            <summary>
            Clase encargada de crear y obtener los distintos rubros disponibles, esta clase cumple con expert ya que contiene toda la información necesaria para cumplir su función
            En un principio era parte del plan hacer una clase abstracta "Elemento" y que Rubros, Ratings y Categories heredaran de la misma para cumplir con LSP, pero debido a problemas con la persistencia esto no fue posible.
            </summary>
        </member>
        <member name="P:Telegram.Rubro.Description">
            <summary>
            String que obtiene o establece la descripción de un rubro.
            </summary>
            <value></value>
        </member>
        <member name="P:Telegram.Rubro.Name">
            <summary>
            String que obtiene o establece el nombre de un rubro.
            </summary>
            <value></value>
        </member>
        <member name="M:Telegram.Rubro.#ctor(System.String,System.String)">
            <summary>
            Constructor de rubros.
            </summary>
            <param name="description"></param>
            <param name="name"></param>
        </member>
        <member name="T:Telegram.Search">
            <summary>
            Clase encargada de buscar Materiales a travez de sus clasificaciones, esta clase utiliza el patrón singleton, esta clase es la encargada de gestionar todos los procesos de busqueda, por lo tanto una sola instancia de ella es necesaria.
            Esta clase cumple con SRP, su unica responsabilidad es buscar ofertas entre las listas.
            </summary>
        </member>
        <member name="P:Telegram.Search.Instance">
            <summary>
            Inicializa la clase Search a travez de un singleton para que solo exista una instancia del catalogo ya que usaremos un catalogo para todas las ofertas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telegram.Search.SearchxCategory(Telegram.Category)">
            <summary>
            Metodo para buscar en el catalogo por categoria.
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Search.SearchxRatings(Telegram.Ratings)">
            <summary>
            Metodo para buscar en el catalogo por habilitacion.
            </summary>
            <param name="ratings"></param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Search.SearchxMaterial(System.String)">
            <summary>
            Metodo para buscar en el catalogo con el nombre del material.
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="T:Telegram.Armadordemensajes">
            <summary>
            Clase encargada de interactuar con la ApiLocation
            </summary>
        </member>
        <member name="M:Telegram.Armadordemensajes.#ctor">
            <summary>
            Singleton para que solo exista una instancia del catalogo.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telegram.Units">
            <summary>
            Clase que se encarga de las unidades de magnitud para las ofertas, esta clase cumple expert ya que contiene toda la información necesaria para cumplir su función.
            </summary>
        </member>
        <member name="P:Telegram.Units.Name">
            <summary>
            Obtiene el nombre de la unidad.
            </summary>
            <value></value>
        </member>
        <member name="M:Telegram.Units.#ctor(System.String)">
            <summary>
            Abreviacion de la unidad.
            </summary>
            <summary>
            Constructor de los objetos Unit.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Telegram.Units.Deleteunit(Telegram.Units)">
            <summary>
            Metodo para eliminar unidades de la lista.
            </summary>
            <param name="unit"></param>
        </member>
        <member name="T:Telegram.User">
            <summary>
            La clase User es una clase abstracta para heredar caracteristicas a la clase Business y la clase Emprendedores.
            </summary>
        </member>
        <member name="P:Telegram.User.Name">
            <summary>
            Obtiene o establece el nombre de un usuario.
            </summary>
            <value></value>
        </member>
        <member name="P:Telegram.User.ID">
            <summary>
            Id del usuario.
            </summary>
            <value></value>
        </member>
        <member name="P:Telegram.User.Location">
            <summary>
            Obtiene o establece la locacion de un usuario.
            </summary>
            <value></value>
        </member>
        <member name="P:Telegram.User.Rubro">
            <summary>
            Obtiene o establece el rubro de un usuario.
            </summary>
            <value></value>
        </member>
        <member name="M:Telegram.User.#ctor(System.String,System.String,Telegram.Rubro,System.String)">
            <summary>
            Constructor de la clase abstracta usuario.
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="rubro"></param>
            <param name="id"></param>
        </member>
    </members>
</doc>
